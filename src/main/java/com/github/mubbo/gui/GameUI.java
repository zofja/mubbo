package com.github.mubbo.gui;

import com.github.mubbo.core.GridManager;
import com.github.mubbo.core.Presetter;
import com.github.mubbo.core.Symbol;
import com.github.mubbo.sound.JavaxSynthesizerWrapper;
import com.github.mubbo.sound.Scale;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Hashtable;
import java.util.Random;

import static com.github.mubbo.core.Symbol.EMPTY;
import static com.github.mubbo.sound.MusicBox.NUMBER_OF_INSTRUMENTS;
import static com.github.mubbo.sound.MusicBox.REVERB_DEFAULT;
import static com.github.mubbo.sound.MusicBox.REVERB_MAX;
import static com.github.mubbo.sound.MusicBox.REVERB_MIN;

public class GameUI {

    /**
     * GUI variables generated by IntelliJ GUI Designer
     */
    private JPanel rootPanel;
    private JButton PLAYButton;
    private JPanel grid;
    private JPanel options;
    private JPanel arrowMenu;
    private JPanel instrumentMenu;
    private JList instrumentList;
    private JList arrowList;
    private JComboBox ScaleList;
    private JSlider ReverbSlider;
    private JPanel reverbChanger;
    private JPanel scaleChanger;
    private JButton RESTARTButton;
    private JButton SAVEbutton;
    private JPanel gridPanel;
    private JButton colorBlindMode;
    private JPanel modePanel;
    private JLabel reverbPanelDescription;
    private JButton ELECTRONICModeButton;
    private JPanel playPanel;

    /**
     * Random generator used to get color.
     */
    private final Random random = new Random();

    /**
     * Color of the grid.
     */
    public static final Color OFF_WHITE = new Color(0xEBEBEB);

    /**
     * Color of the border.
     */
    public static final Color BORDER_COLOR = new Color(0xB3B3B3);

    /**
     * Color of the border.
     */
    public static final Color EDGE_COLOR = new Color(0x939393);
    public static final Color COLOR_BLIND_EDGE = new Color(0x3d3d3d);

    /**
     * Number of available instruments.
     */
    static final int instrumentsNumber = NUMBER_OF_INSTRUMENTS;

    /**
     * Size of the grid.
     */
    static final int gridSize = 9;

    /**
     * Duration of each tick in milliseconds.
     */
    private static final int tickMilliseconds = 250;

    /**
     * Number of ticks.
     */
    private int ticks = 3000; // time playing = ticks * tickMilliseconds

    /**
     * Currently marked as checked symbol.
     */
    private static Symbol selectedSymbol = EMPTY;

    /**
     * Currently selected icon.
     */
    private static Integer selectedInstrument = -1;

    /**
     * Remembers state of the game.
     */
    private boolean ifStarted = false;

    /**
     * GridManager object.
     */
    private GridManager gridManager;

    /**
     * Timer to manage each tick.
     */
    private Timer timer = new Timer(tickMilliseconds, new UpdateGridAfterTick());

    /**
     * Enables a user to add and delete arrows from board.
     */
    private static JButton[][] buttonGrid = new JButton[gridSize][gridSize];

    /**
     * Used for visual representation.
     */
    private static Symbol[][][] symbolGrid = new Symbol[gridSize][gridSize][instrumentsNumber];

    /**
     * Used for painting instrument icons.
     */
    private static Hashtable<Integer, Symbol>[][] instruments;

    /**
     * Number of row/column in grid which will play a note if it contains {@code Particle}.
     */
    private static int wall = 8;

    private static boolean colorBlindOn = false;

    private static boolean electronicMode = false;

    private void changeButtonGridBorders(boolean visibility) {
        for (int y = 0; y < gridSize; y++) {
            for (int x = 0; x < gridSize; x++) {
                Border border;
                if (colorBlindOn) {
                    border = new LineBorder(COLOR_BLIND_EDGE, 2);
                } else {
                    border = new LineBorder(EDGE_COLOR, 1);
                }
                buttonGrid[x][y].setBorder(border);
                buttonGrid[x][y].setBorderPainted(visibility);
            }
        }
    }

    /**
     * Constructor with event listeners, all generated by IntelliJ GUI Designer
     */
    GameUI() {
        $$$setupUI$$$();
        /**
         * PLAY/PAUSE button action listener
         * repaints borders
         */
        PLAYButton.addActionListener(actionEvent -> {
            if (!ifStarted) {
                ifStarted = true;
                if (!colorBlindOn) {
                    changeButtonGridBorders(false);
                }
                timer.start();
                gridManager.init(symbolGrid);
                JButton clicked = (JButton) actionEvent.getSource();
                clicked.setText("PAUSE");
            } else {
                ifStarted = false;
                timer.stop();
                changeButtonGridBorders(true);
                JButton clicked = (JButton) actionEvent.getSource();
                clicked.setText("PLAY");
            }
        });
        arrowList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                JList list = (JList) e.getSource();
                int index = list.locationToIndex(e.getPoint());
                ListItem item = (ListItem) list.getModel().getElementAt(index);
                item.setSelected(!item.isSelected());
                list.repaint(list.getCellBounds(index, index));
                if (selectedSymbol != Symbol.EMPTY) {
                    ((ListItem) list.getModel().getElementAt(selectedSymbol.ordinal())).setSelected(false);
                }
                selectedSymbol = Symbol.values()[index];
                if (index == 4) {
                    selectedSymbol = EMPTY;
                }
            }
        });
        instrumentList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                JList list = (JList) e.getSource();
                int index = list.locationToIndex(e.getPoint());
                ListItem item = (ListItem) list.getModel().getElementAt(index);
                item.setSelected(!item.isSelected());
                list.repaint(list.getCellBounds(index, index));
                if (selectedInstrument != -1) {
                    ((ListItem) list.getModel().getElementAt(selectedInstrument)).setSelected(false);
                }
                selectedInstrument = index;
            }
        });
        ReverbSlider.addChangeListener(changeEvent -> {
            JSlider source = (JSlider) changeEvent.getSource();
            int x = source.getValue();
            gridManager.changeReverbFromManager(x);
        });
        ScaleList.addItemListener(itemEvent -> {
            if (itemEvent.getStateChange() == ItemEvent.SELECTED) {
                ItemSelectable is = itemEvent.getItemSelectable();
                gridManager.changeScaleFromManager(selectedString(is));
            }
        });
        RESTARTButton.addActionListener(actionEvent -> {
            gridManager.clear();
            for (int y = 0; y < gridSize; ++y) {
                for (int x = 0; x < gridSize; ++x) {
                    for (int i = 0; i < instrumentsNumber; i++) {
                        symbolGrid[x][y][i] = EMPTY;
                        clearCell(x, y, i);
                    }
                    instruments[x][y].clear();
                    buttonGrid[x][y].setIcon(null);
                }
            }
            if (ifStarted) {
                PLAYButton.doClick();
            }
        });
        SAVEbutton.addActionListener(actionEvent -> {
            new SaveScreenUI().main3(symbolGrid);
        });
        colorBlindMode.addActionListener(actionEvent -> {
            if (colorBlindOn) {
                colorBlindMode.setBackground(BORDER_COLOR);
                colorBlindOn = false;
            } else {
                colorBlindOn = true;
                colorBlindMode.setBackground(COLOR_BLIND_EDGE);
            }
            populateInstrumentList();
            changeButtonGridBorders(true);
            display(symbolGrid);
        });
        ELECTRONICModeButton.addActionListener(actionEvent -> {
            if (electronicMode) {
                electronicMode = false;
                ELECTRONICModeButton.setBackground(BORDER_COLOR);
                gridManager.setPresetTouBbo("Classic");
            } else {
                electronicMode = true;
                ELECTRONICModeButton.setBackground(COLOR_BLIND_EDGE);
                gridManager.setPresetTouBbo("Electronic");
            }
        });
    }

    private void populateInstrumentList() {
        ListItem[] instruments = new ListItem[NUMBER_OF_INSTRUMENTS];
        for (int i = 0; i < NUMBER_OF_INSTRUMENTS; i++) {
            instruments[i] = new ListItem(JavaxSynthesizerWrapper.INSTRUMENTS_NAMES.get(i), InstrumentIcon.getListIcon(EMPTY, i, colorBlindOn));
        }
        instrumentList.setListData(instruments);
        instrumentList.repaint();
    }


    static private String selectedString(ItemSelectable is) {
        Object[] selected = is.getSelectedObjects();
        return ((selected.length == 0) ? "null" : (String) selected[0]);
    }


    void main2(String preset, String scale, int reverb) {
        JFrame frame = new JFrame("GameUI");
        frame.setContentPane(rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // initialize attributes
        for (int x = 0; x < gridSize; x++) {
            for (int y = 0; y < gridSize; y++) {
                for (int i = 0; i < instrumentsNumber; i++) {
                    symbolGrid[x][y][i] = EMPTY;
                }
            }
        }
        gridManager = new GridManager(gridSize, scale, reverb);
        instruments = new Hashtable[gridSize][gridSize];
        for (int x = 0; x < gridSize; x++) {
            for (int y = 0; y < gridSize; y++) {
                instruments[x][y] = new Hashtable<>();
            }
        }
        if (preset != null) {
            display(Presetter.importPreset(preset));
        }
    }


    private void clearCell(int x, int y, int i) {
        if (!isInBoundaries(new Point(x, y))) {
            buttonGrid[x][y].setBackground(BORDER_COLOR);
        } else {
            buttonGrid[x][y].setBackground(OFF_WHITE);
            buttonGrid[x][y].setIcon(null);
            symbolGrid[x][y][i] = EMPTY;
        }
    }


    private void createUIComponents() {
        InstrumentIcon.generateImages();
        // custom grid
        grid = new JPanel();
        grid.setLayout(new GridLayout(gridSize, gridSize));
        for (int y = 0; y < gridSize; ++y) {
            for (int x = 0; x < gridSize; ++x) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(70, 70));
                buttonGrid[x][y] = button;
                for (int i = 0; i < instrumentsNumber; i++) {
                    clearCell(x, y, i);
                    grid.add(buttonGrid[x][y]);
                    buttonGrid[x][y].addActionListener(new ButtonHandler());
                }
            }
        }
        changeButtonGridBorders(true);
        // scale list custom create
        ScaleList = new JComboBox();
        for (var scale : Scale.values()) {
            ScaleList.addItem(scale.getDisplayName());
        }
        ScaleList.setSelectedItem(Scale.MAJOR.getDisplayName());

        // reverb slider custom create
        ReverbSlider = new JSlider(REVERB_MIN, REVERB_MAX, REVERB_DEFAULT);

        // custom arrowList
        arrowList = new JList<ListItem>();
        ListItem[] list = new ListItem[]{
                new ListItem("LEFT"),
                new ListItem("UP"),
                new ListItem("RIGHT"),
                new ListItem("DOWN"),
                new ListItem("EMPTY")};
        arrowList.setListData(list);
        arrowList.setSelectionModel(new SelectionModel(arrowList, 1));
        arrowList.setCellRenderer(new ListRenderer());
        selectedSymbol = Symbol.LEFT;
        arrowList.setSelectedIndex(0);

        // custom instrumentList
        instrumentList = new JList<ListItem>();
        populateInstrumentList();
        instrumentList.setSelectionModel(new SelectionModel(instrumentList, 1));
        instrumentList.setCellRenderer(new ListRenderer());
        selectedInstrument = 0;
        instrumentList.setSelectedIndex(selectedInstrument);

//        modeList.setListData(JavaxSynthesizerWrapper.getAllInstrumentPresets().stream().map(ListItem::new).toArray());
    }

    /**
     * Class used to react to grid's button click.
     */
    static class ButtonHandler implements ActionListener {

        /**
         * Changes {@code symbolGrid} displays {@code selectedIcon} on clicked grid's field.
         *
         * @param x x coordinate of clicked button.
         * @param y y coordinate of clicked button.
         */
        private void processClick(int x, int y) {

            if (!isInBoundaries(new Point(x, y)) || selectedInstrument == -1) {
                return;
            }
            symbolGrid[x][y][selectedInstrument] = selectedSymbol;
            if (selectedSymbol == EMPTY) {
                instruments[x][y].remove(selectedInstrument);
                buttonGrid[x][y].setIcon(new InstrumentIcon(instruments[x][y], colorBlindOn));
            } else {
                instruments[x][y].put(selectedInstrument, selectedSymbol);
                buttonGrid[x][y].setIcon(new InstrumentIcon(instruments[x][y], colorBlindOn)); // ustaw customową ikonę
            }
        }


        @Override
        public void actionPerformed(ActionEvent e) {
            for (int y = 0; y < gridSize; ++y) {
                for (int x = 0; x < gridSize; ++x) {
                    if (e.getSource() == buttonGrid[x][y]) {
                        processClick(x, y);
                        return;
                    }
                }
            }
        }
    }


    /**
     * The most important Listener used to refresh grid after each tick.
     */
    private class UpdateGridAfterTick implements ActionListener {

        /**
         * Specifies what happens after each tick.
         *
         * @param event change on grid
         */
        public void actionPerformed(ActionEvent event) {
            if (ticks == 0) {
                timer.stop();
            } else {
                gridManager.tick();
                display(gridManager.displayNext());
                ticks--;
            }
        }
    }


    /**
     * Displays grid.
     *
     * @param nxtBoard grid to display.
     */
    private void display(Symbol[][][] nxtBoard) {
        symbolGrid = nxtBoard;
        for (int y = 0; y < gridSize; ++y) {
            for (int x = 0; x < gridSize; ++x) {
                instruments[x][y].clear();
                boolean lightWall = false;
                for (int i = 0; i < instrumentsNumber; i++) {
                    if (!isInBoundaries(new Point(x, y))) {
                        if (nxtBoard[x][y][i] != EMPTY) {
                            lightWall = true;
                        } else {
                            buttonGrid[x][y].setBackground(BORDER_COLOR);
                        }
                    } else {
                        if (nxtBoard[x][y][i] != EMPTY) {
                            instruments[x][y].put(i, nxtBoard[x][y][i]);
                        } else {
                            buttonGrid[x][y].setIcon(null);
                        }
                    }
                }
                if (lightWall) {
                    buttonGrid[x][y].setBackground(randomColor().brighter());
                }
                buttonGrid[x][y].setIcon(new InstrumentIcon(instruments[x][y], colorBlindOn));
            }
        }
    }

    /**
     * Generates random, bright color.
     *
     * @return a Color.
     */
    private Color randomColor() {
        int c = random.nextInt(3 * 0xff);
        if (c < 0xff) {
            c %= 0xff;
            return new Color(0xff - c, c, 0xff);
        } else if (c < 2 * 0xff) {
            c %= 0xff;
            return new Color(0xff, 0xff - c, c);
        } else {
            c %= 0xff;
            return new Color(c, 0xff, 0xff - c);
        }
    }


    /**
     * Checks if given point is in boundaries.
     *
     * @param p coordinates
     * @return true if point in in boundaries, otherwise false.
     */
    private static boolean isInBoundaries(Point p) {
        return !(p.x == 0 || p.x == wall || p.y == 0 || p.y == wall);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 2, new Insets(10, 20, 10, 20), -1, -1));
        rootPanel.setBackground(new Color(-2105377));
        rootPanel.setMaximumSize(new Dimension(-1, -1));
        rootPanel.setMinimumSize(new Dimension(900, 720));
        rootPanel.setPreferredSize(new Dimension(900, 720));
        gridPanel = new JPanel();
        gridPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        gridPanel.setOpaque(false);
        rootPanel.add(gridPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        grid.setBackground(new Color(-1907998));
        gridPanel.add(grid, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(630, 630), new Dimension(630, 630), new Dimension(630, 630), 0, true));
        options = new JPanel();
        options.setLayout(new GridLayoutManager(6, 1, new Insets(10, 10, 10, 10), -1, -1));
        options.setOpaque(false);
        gridPanel.add(options, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        arrowMenu = new JPanel();
        arrowMenu.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        arrowMenu.setOpaque(false);
        options.add(arrowMenu, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Font arrowListFont = this.getFont("Noto Sans CJK KR Regular", -1, 18, arrowList.getFont());
        if (arrowListFont != null) arrowList.setFont(arrowListFont);
        arrowList.setForeground(new Color(-12763843));
        arrowList.setOpaque(false);
        arrowMenu.add(arrowList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        instrumentMenu = new JPanel();
        instrumentMenu.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        instrumentMenu.setOpaque(false);
        options.add(instrumentMenu, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Font instrumentListFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 18, instrumentList.getFont());
        if (instrumentListFont != null) instrumentList.setFont(instrumentListFont);
        instrumentList.setForeground(new Color(-12763843));
        instrumentList.setOpaque(false);
        instrumentMenu.add(instrumentList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        reverbChanger = new JPanel();
        reverbChanger.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        reverbChanger.setBackground(new Color(-2105377));
        options.add(reverbChanger, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ReverbSlider.setBackground(new Color(-5789785));
        Font ReverbSliderFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 16, ReverbSlider.getFont());
        if (ReverbSliderFont != null) ReverbSlider.setFont(ReverbSliderFont);
        ReverbSlider.setForeground(new Color(-12763843));
        ReverbSlider.setMajorTickSpacing(1975);
        ReverbSlider.setMaximum(2000);
        ReverbSlider.setMinimum(25);
        ReverbSlider.setOpaque(false);
        ReverbSlider.setPaintLabels(true);
        ReverbSlider.setPaintTrack(true);
        reverbChanger.add(ReverbSlider, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reverbPanelDescription = new JLabel();
        reverbPanelDescription.setFocusable(true);
        Font reverbPanelDescriptionFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 16, reverbPanelDescription.getFont());
        if (reverbPanelDescriptionFont != null) reverbPanelDescription.setFont(reverbPanelDescriptionFont);
        reverbPanelDescription.setForeground(new Color(-12763843));
        reverbPanelDescription.setText("Reverb:");
        reverbChanger.add(reverbPanelDescription, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scaleChanger = new JPanel();
        scaleChanger.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scaleChanger.setBackground(new Color(-2105377));
        options.add(scaleChanger, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ScaleList.setBackground(new Color(-2105377));
        Font ScaleListFont = this.getFont("Noto Sans Mono CJK JP Regular", -1, 18, ScaleList.getFont());
        if (ScaleListFont != null) ScaleList.setFont(ScaleListFont);
        ScaleList.setForeground(new Color(-13619152));
        ScaleList.setName("");
        ScaleList.setOpaque(false);
        scaleChanger.add(ScaleList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colorBlindMode = new JButton();
        colorBlindMode.setBackground(new Color(-6513508));
        colorBlindMode.setFocusPainted(false);
        colorBlindMode.setFocusable(false);
        Font colorBlindModeFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 16, colorBlindMode.getFont());
        if (colorBlindModeFont != null) colorBlindMode.setFont(colorBlindModeFont);
        colorBlindMode.setForeground(new Color(-2105377));
        colorBlindMode.setText("COLOR-BLIND");
        options.add(colorBlindMode, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modePanel = new JPanel();
        modePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        modePanel.setOpaque(false);
        options.add(modePanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ELECTRONICModeButton = new JButton();
        ELECTRONICModeButton.setBackground(new Color(-6513508));
        ELECTRONICModeButton.setFocusPainted(false);
        ELECTRONICModeButton.setFocusable(false);
        Font ELECTRONICModeButtonFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 16, ELECTRONICModeButton.getFont());
        if (ELECTRONICModeButtonFont != null) ELECTRONICModeButton.setFont(ELECTRONICModeButtonFont);
        ELECTRONICModeButton.setForeground(new Color(-2105377));
        ELECTRONICModeButton.setText("ELECTRONIC");
        modePanel.add(ELECTRONICModeButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playPanel = new JPanel();
        playPanel.setLayout(new GridLayoutManager(1, 3, new Insets(20, 0, 0, 0), -1, -1));
        playPanel.setBackground(new Color(-2105377));
        gridPanel.add(playPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        PLAYButton = new JButton();
        PLAYButton.setBackground(new Color(-12763843));
        PLAYButton.setFocusPainted(false);
        PLAYButton.setFocusable(false);
        Font PLAYButtonFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 28, PLAYButton.getFont());
        if (PLAYButtonFont != null) PLAYButton.setFont(PLAYButtonFont);
        PLAYButton.setForeground(new Color(-2105377));
        PLAYButton.setText("PLAY");
        playPanel.add(PLAYButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RESTARTButton = new JButton();
        RESTARTButton.setBackground(new Color(-6513508));
        RESTARTButton.setFocusPainted(false);
        RESTARTButton.setFocusable(false);
        Font RESTARTButtonFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 24, RESTARTButton.getFont());
        if (RESTARTButtonFont != null) RESTARTButton.setFont(RESTARTButtonFont);
        RESTARTButton.setForeground(new Color(-2105377));
        RESTARTButton.setText("CLEAR");
        playPanel.add(RESTARTButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SAVEbutton = new JButton();
        SAVEbutton.setBackground(new Color(-6513508));
        SAVEbutton.setFocusPainted(false);
        SAVEbutton.setFocusable(false);
        Font SAVEbuttonFont = this.getFont("Noto Sans Mono CJK KR Regular", -1, 24, SAVEbutton.getFont());
        if (SAVEbuttonFont != null) SAVEbutton.setFont(SAVEbuttonFont);
        SAVEbutton.setForeground(new Color(-2105377));
        SAVEbutton.setText("SAVE");
        playPanel.add(SAVEbutton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font getFont(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
