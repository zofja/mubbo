package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import core.GridManager;
import core.Symbol;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;

public class SaveScreenUI {
    private JPanel rootPanel;
    private JPanel textPanel;
    private JTextField userInput;
    private JButton SAVEbutton;
    private JPanel buttonPanel;
    private JPanel descriptionPanel;
    private JLabel descriptionLabel;
    private static JFrame frame;

    private static Symbol[][][] preset;

    SaveScreenUI() {
        $$$setupUI$$$();
        SAVEbutton.addActionListener(actionEvent -> {
            String filename = userInput.getText();
            GridManager.exportPreset(preset, filename);
            frame.dispose();
        });
    }

    void main3(Symbol[][][] preset) {
        SaveScreenUI.preset = preset;
        frame = new JFrame("SaveScreenUI");
        frame.setContentPane(new SaveScreenUI().rootPanel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setBackground(new Color(-14869219));
        rootPanel.setMaximumSize(new Dimension(400, 300));
        rootPanel.setMinimumSize(new Dimension(400, 300));
        rootPanel.setPreferredSize(new Dimension(400, 300));
        descriptionPanel = new JPanel();
        descriptionPanel.setLayout(new GridLayoutManager(1, 1, new Insets(20, 20, 20, 20), -1, -1));
        descriptionPanel.setOpaque(false);
        rootPanel.add(descriptionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        descriptionLabel = new JLabel();
        Font descriptionLabelFont = this.$$$getFont$$$("Noto Sans Mono CJK KR Regular", -1, 24, descriptionLabel.getFont());
        if (descriptionLabelFont != null) descriptionLabel.setFont(descriptionLabelFont);
        descriptionLabel.setForeground(new Color(-5789785));
        descriptionLabel.setText("Choose preset name:");
        descriptionPanel.add(descriptionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textPanel = new JPanel();
        textPanel.setLayout(new GridLayoutManager(1, 1, new Insets(20, 20, 20, 20), -1, -1));
        textPanel.setOpaque(false);
        rootPanel.add(textPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Font userInputFont = this.$$$getFont$$$("Noto Mono", -1, 20, userInput.getFont());
        if (userInputFont != null) userInput.setFont(userInputFont);
        textPanel.add(userInput, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, -1), null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 1, new Insets(20, 20, 20, 20), -1, -1));
        buttonPanel.setOpaque(false);
        rootPanel.add(buttonPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SAVEbutton = new JButton();
        SAVEbutton.setBackground(new Color(-8224126));
        Font SAVEbuttonFont = this.$$$getFont$$$("Noto Sans Mono CJK KR Regular", -1, 24, SAVEbutton.getFont());
        if (SAVEbuttonFont != null) SAVEbutton.setFont(SAVEbuttonFont);
        SAVEbutton.setForeground(new Color(-2105377));
        SAVEbutton.setText("SAVE");
        buttonPanel.add(SAVEbutton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        userInput = new JTextField(17);
        userInput.setDocument(new TextFieldLimit(16));
    }
}
